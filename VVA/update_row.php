<?php
// DÃ©clare que la rÃ©ponse sera au format JSON
header('Content-Type: application/json');

// DÃ©marre la session ou la reprend (inclut les variables de session)
include('session_start.php');


// RÃ©cupÃ¨re les donnÃ©es JSON envoyÃ©es via la requÃªte HTTP (POST ou PUT)
$data = json_decode(file_get_contents('php://input'), true);

// VÃ©rifie que les donnÃ©es essentielles sont bien prÃ©sentes et valides
if (!isset($data['table'], $data['row'], $data['primaryKeys']) || !is_array($data['row']) || !is_array($data['primaryKeys'])) {
    echo json_encode(["error" => "Invalid input data"]);
    exit();
}

$tableName = $conn->real_escape_string($data['table']);

// Contient les valeurs Ã  mettre Ã  jour
$updatedRow = $data['row'];

error_log(print_r($updatedRow, true));

if ($tableName == 'ACTIVITE' && $updatedRow['CODEETATACT'] == 'AN') {
    $updatedRow['DATEANNULEACT'] == date('Y-m-d');
}

// Contient les clÃ©s primaires pour identifier la ligne Ã  modifier
$primaryKeys = $data['primaryKeys'];

// RÃ©cupÃ¨re la structure de la table (nom des colonnes et leurs types)
$queryColumns = $conn->query("DESCRIBE `$tableName`");
$columnTypes = [];
while ($row = $queryColumns->fetch_assoc()) {
    $columnTypes[$row['Field']] = $row['Type'];
}

// Initialisation des parties SET et WHERE de la requÃªte SQL
$setClauses = [];
$whereClauses = [];

// Boucle sur chaque colonne Ã  mettre Ã  jour
foreach ($updatedRow as $column => $value) {
    // Ignore les colonnes non prÃ©sentes dans la table
    if (!array_key_exists($column, $columnTypes))
        continue;

    // SÃ©curise le nom de la colonne
    $escapedColumn = "`" . $conn->real_escape_string($column) . "`";
    $type = strtolower($columnTypes[$column]);

    // Adapte la valeur selon le type de la colonne
    if (strpos($type, 'int') !== false || strpos($type, 'decimal') !== false || strpos($type, 'float') !== false) {
        $safeValue = is_numeric($value) ? $value : 'NULL';
    } else if (strpos($type, 'date') !== false || strpos($type, 'time') !== false) {
        if ($value === '' || $value === null) {
            $safeValue = 'NULL';
        } else {
            $safeValue = "'" . $conn->real_escape_string($value) . "'";
        }
    } else {
        // Pour tous les autres types (ex : texte), on entoure de guillemets
        $safeValue = "'" . $conn->real_escape_string($value) . "'";
    }

    // Si c'est une clÃ© primaire, on l'ajoute Ã  la clause WHERE
    if (in_array($column, $primaryKeys)) {
        $whereClauses[] = "$escapedColumn = $safeValue";
    } else {
        // Sinon, on l'ajoute Ã  la clause SET
        $setClauses[] = "$escapedColumn = $safeValue";
    }
}

// VÃ©rifie qu'on a bien des clauses SET et WHERE valides
if (empty($setClauses) || empty($whereClauses)) {
    echo json_encode(["error" => "Invalid SQL query parameters (empty SET or WHERE clauses)"]);
    exit();
}

// Construit la requÃªte SQL finale UPDATE
$sql = "UPDATE `$tableName` SET " . implode(', ', $setClauses) . " WHERE " . implode(' AND ', $whereClauses);

try {
    // ExÃ©cute la requÃªte et renvoie un succÃ¨s si OK
    if ($conn->query($sql) === TRUE) {
        if ($tableName == 'ACTIVITE' && $updatedRow['CODEETATACT'] == 'AN') { // activitÃ© annulÃ©e
            // Annule les inscriptions et Ã©ventuellement envoie un email
            $query = "UPDATE INSCRIPTION SET DATEANNULE = ? WHERE CODEANIM = ? AND DATEACT = ?";
            $stmt = $conn->prepare($query);
            if (!$stmt) {
                throw new Exception("Erreur de prÃ©paration de la requÃªte: " . $conn->error);
            }
            $stmt->bind_param("sss", $updatedRow['DATEANNULEACT'], $updatedRow['CODEANIM'], $updatedRow['DATEACT']);
            if (!$stmt->execute()) {
                throw new Exception("Erreur lors de l'exÃ©cution de la requÃªte: " . $stmt->error);
            }

            // ðŸ”¥ On rÃ©cupÃ¨re les NOINSCRIP des inscriptions annulÃ©es
            $selectQuery = "SELECT NOINSCRIP FROM INSCRIPTION
                WHERE CODEANIM = ? AND DATEACT = ? AND DATEANNULE IS NOT NULL";
            $stmtSelect = $conn->prepare($selectQuery);
            if (!$stmtSelect) {
                throw new Exception("Erreur de prÃ©paration de la requÃªte SELECT: " . $conn->error);
            }
            $stmtSelect->bind_param("ss", $updatedRow['CODEANIM'], $updatedRow['DATEACT']);
            $stmtSelect->execute();
            $result = $stmtSelect->get_result();

            $annulations = [];
            while ($row = $result->fetch_assoc()) {
                $annulations[] = $row['NOINSCRIP'];
            }

            echo json_encode([
                "success" => "Enregistrement mis Ã  jour avec succÃ¨s. Inscriptions annulÃ©es (" . implode(', ', $annulations) . ")."
            ]);

            // Ã€ faire : envoyer un mail aux vacanciers pour les informer que l'activitÃ© est annulÃ©e

        } else {
            echo json_encode(["success" => "Enregistrement mis Ã  jour avec succÃ¨s."]);
        }
    } else {
        // Si erreur SQL, on lance une exception
        throw new Exception("SQL Error: " . $conn->error);
    }
} catch (Exception $e) {
    // Gestion de l'erreur : code 500 + message d'erreur
    http_response_code(500);
    echo json_encode(["error" => $e->getMessage()]);
}

// Ferme la connexion Ã  la base de donnÃ©es
$conn->close();
